/*
Cashfree Payout APIs

Cashfree's Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.

API version: 2024-01-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_payout

import (
	"encoding/json"
)

// checks if the CreateBatchTransferRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBatchTransferRequest{}

// CreateBatchTransferRequest Batch Transfer V2
type CreateBatchTransferRequest struct {
        // It is the unique ID you create to identify the batch transfer request. The maximum character limit is 60. Alphanumeric and underscore ( _ ) characters are allowed.
    BatchTransferId string `json:"batch_transfer_id"`
    Transfers []CreateBatchTransferRequestTransfersInner `json:"transfers,omitempty"`
}

        type _CreateBatchTransferRequest CreateBatchTransferRequest

// NewCreateBatchTransferRequest instantiates a new CreateBatchTransferRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBatchTransferRequest(batchTransferId string) *CreateBatchTransferRequest {
this := CreateBatchTransferRequest{}
        this.BatchTransferId = batchTransferId
return &this
}

// NewCreateBatchTransferRequestWithDefaults instantiates a new CreateBatchTransferRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBatchTransferRequestWithDefaults() *CreateBatchTransferRequest {
this := CreateBatchTransferRequest{}
return &this
}

        // GetBatchTransferId returns the BatchTransferId field value
        func (o *CreateBatchTransferRequest) GetBatchTransferId() string {
        if o == nil {
        var ret string
        return ret
        }

            return o.BatchTransferId
        }

        // GetBatchTransferIdOk returns a tuple with the BatchTransferId field value
        // and a boolean to check if the value has been set.
        func (o *CreateBatchTransferRequest) GetBatchTransferIdOk() (*string, bool) {
        if o == nil {
            return nil, false
        }
            return &o.BatchTransferId, true
        }

        // SetBatchTransferId sets field value
        func (o *CreateBatchTransferRequest) SetBatchTransferId(v string) {
            o.BatchTransferId = v
        }

        // GetTransfers returns the Transfers field value if set, zero value otherwise.
        func (o *CreateBatchTransferRequest) GetTransfers() []CreateBatchTransferRequestTransfersInner {
        if o == nil || IsNil(o.Transfers) {
        var ret []CreateBatchTransferRequestTransfersInner
        return ret
        }
            return o.Transfers
        }

        // GetTransfersOk returns a tuple with the Transfers field value if set, nil otherwise
        // and a boolean to check if the value has been set.
        func (o *CreateBatchTransferRequest) GetTransfersOk() ([]CreateBatchTransferRequestTransfersInner, bool) {
        if o == nil || IsNil(o.Transfers) {
            return nil, false
        }
            return o.Transfers, true
        }

        // HasTransfers returns a boolean if a field has been set.
        func (o *CreateBatchTransferRequest) HasTransfers() bool {
        if o != nil && !IsNil(o.Transfers) {
        return true
        }

        return false
        }

        // SetTransfers gets a reference to the given []CreateBatchTransferRequestTransfersInner and assigns it to the Transfers field.
        func (o *CreateBatchTransferRequest) SetTransfers(v []CreateBatchTransferRequestTransfersInner) {
            o.Transfers = v
        }

func (o CreateBatchTransferRequest) ToMap() (map[string]interface{}, error) {
toSerialize := map[string]interface{}{}
            toSerialize["batch_transfer_id"] = o.BatchTransferId
            if !IsNil(o.Transfers) {
            toSerialize["transfers"] = o.Transfers
            }
return toSerialize, nil
}

        func (o *CreateBatchTransferRequest) UnmarshalJSON(data []byte) (err error) {
    // This validates that all required properties are included in the JSON object
    // by unmarshalling the object into a generic map with string keys and checking
    // that every required field exists as a key in the generic map.
    requiredProperties := []string{
        "batch_transfer_id",
    }

    allProperties := make(map[string]interface{})

    err = json.Unmarshal(data, &allProperties)

    if err != nil {
    return err;
    }

    for _, requiredProperty := range(requiredProperties) {
    if _, exists := allProperties[requiredProperty]; !exists {
    return fmt.Errorf("no value given for required property %v", requiredProperty)
    }
    }

        varCreateBatchTransferRequest := _CreateBatchTransferRequest{}

        decoder := json.NewDecoder(bytes.NewReader(data))
        decoder.DisallowUnknownFields()
        err = decoder.Decode(&varCreateBatchTransferRequest)

        if err != nil {
        return err
        }

        *o = CreateBatchTransferRequest(varCreateBatchTransferRequest)

        return err
        }



